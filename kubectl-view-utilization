#!/usr/bin/env bash
#
# Copyright 2019 Peter Strzyzewski
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Prints cluster resource utilization

set -eo pipefail

PLUGIN_VERSION="v0.1.0"
NAMESPACE=""

print_plugin_version() {
    echo "${PLUGIN_VERSION}"
    exit
}

memory_prettify() {
    awk \
    '{sum=$1 ;
    hum[1024**3]="TiB";
    hum[1024**2]="GiB";
    hum[1024**1]="Mb";
    for (x=1024**3; x>=1024; x/=1024){ 
        if (sum>=x) { 
            if (sum/x <= 10){
                printf "%.1f%s\n",sum/x,hum[x];break;
            } else {
                printf "%.f%s\n",sum/x,hum[x];break 
            }
        } 
    }
    }'
}

utilization_namespaces() {
    local pods_all_requests
    pods_all_requests=$(kubectl get pod --all-namespaces -o=jsonpath="{range .items[*]}{.metadata.namespace}{'\t'}{range .spec.containers[*]}{.resources.requests.cpu}{'\t'}{.resources.requests.memory}{'\n'}{end}{'\n'}{end}")
    #echo "$pods_all_requests"

    total_cpu_requests_per_namespace_m=$(echo "${pods_all_requests}" | \
        awk \
        '
        function mem_pretty(sum){
            hum[1024**3]="TiB";
            hum[1024**2]="GiB";
            hum[1024**1]="Mb";
            for (x=1024**3; x>=1024; x/=1024){ 
                if (sum>=x) { 
                    if (sum/x <= 10){
                        ret = sprintf("%.1g %s",sum/x,hum[x]);break;
                    } else {
                        ret = sprintf("%.f %s",sum/x,hum[x]);break;
                    }
                }
            }
            return ret
        }

        function cpu_pretty(sum){
            if (sum < 1000) {
                ret = sprintf("%dm",sum)
            } else if (sum < 10000) {
                ret = sprintf("%.1g",sum/1000)
            } else {
                ret = sprintf("%d",sum/1000)
            }
            return ret
        }
 
        BEGIN 
        { IGNORECASE = 1 }
        { if (length($1)>longest_namespace_len) {
               longest_namespace_len = length($1) + 2
        }}
      
       namespaces[$1];

       $2 ~ /[0-9]$/{ns_cpu[$1]+=$2*1000;};
       $2 ~ /m?$/{ns_cpu[$1]+=$2;};

       $3 ~ /M(i)?$/{ns_mem[$1]+=$3*1024;next};
       $3 ~ /G(i)?$/{ns_mem[$1]+=$3*1048576;next};
       $3 ~ /T(i)?$/{ns_mem[$1]+=$3*1073741824;next};

       {if (length(ns_mem[$1]) == 0) {
           ns_mem[$1] = 0;
       }}

       {if (length(ns_cpu[$1]) == 0) {
           ns_cpu[$1] = 0;
       }}
       END {
       printf("%-" longest_namespace_len "s%8s%8s\n", "NAMESPACE", "CPU", "MEMORY")

       for (namespace in namespaces) 
           printf("%-" longest_namespace_len "s%8s%8s\n", namespace, cpu_pretty(ns_cpu[namespace]), mem_pretty(ns_mem[namespace]))
       }')
       
    echo "${total_cpu_requests_per_namespace_m}"

}


utilization_cluster() {

    local pods_all_requests
    local total_cpu_requests_m
    local total_memory_requests_kb
    local total_memory_requests_pretty
    local node_all_allocatable
    local total_cpu_capacity_m
    local total_memory_capacity_kb
    local avg_percent_mem
    local avg_percent_cpu
    local namespace

    if [ "${NAMESPACE}" != "" ]; then
        namespace="--namespace=${NAMESPACE}"
    else
        namespace="--all-namespaces"
    fi

    pods_all_requests=$(kubectl get pod ${namespace} -o=jsonpath="{range .items[*]}{range .spec.containers[*]}{.resources.requests.cpu}{'\t'}{.resources.requests.memory}{'\n'}{end}{'\n'}{end}")
    total_cpu_requests_m=$(echo "${pods_all_requests}" | \
        awk \
      'BEGIN{IGNORECASE = 1}
       $1 ~ /[0-9]$/{s+=$1;next};
       $1 ~ /m?$/{s+=$1/1000;next};
       END {printf "%.2g\n", s}'
       )
        
    total_memory_requests_kb=$(echo "${pods_all_requests}" | \
        awk \
      'BEGIN{IGNORECASE = 1}
       $2 ~ /M(i)?$/{s+=$2*1024; next};
       $2 ~ /G(i)?$/{s+=$2*1048576; next};
       $2 ~ /T(i)?$/{s+=$2*1073741824; next};
       END {printf "%.0f\n", s}'
       )

    node_all_allocatable=$(kubectl get nodes -o=jsonpath="{range .items[*]}{.status.allocatable.cpu}{'\t'}{.status.allocatable.memory}{'\n'}{end}")
    total_cpu_capacity_m=$(echo "${node_all_allocatable}" | \
        awk \
      'BEGIN{IGNORECASE = 1}
       $1 ~ /[0-9]$/{s+=$1;next};
       $1 ~ /m?$/{s+=$1/1000;next};
       END {if (s < 5) 
           printf "%.2g\n", s;
       else
           printf "%.f\n", s;
       }'
       )

    total_memory_capacity_kb=$(echo "${node_all_allocatable}" | \
        awk \
      'BEGIN{IGNORECASE = 1}
       $2 ~ /Ki?$/{s+=$2; next};
       END {printf "%.0f\n", s}'
       )
 
    avg_percent_cpu=$(echo "${total_cpu_requests_m} * 100 / ${total_cpu_capacity_m}" | bc )
    avg_percent_mem=$(echo "${total_memory_requests_kb} * 100 / ${total_memory_capacity_kb}" | bc )

    total_memory_requests_pretty=$(echo "${total_memory_requests_kb}" | memory_prettify)
    total_memory_capacity_pretty=$(echo "${total_memory_capacity_kb}" | memory_prettify)
    printf "cores  %7s / %-7s (%s%%)\n" "${total_cpu_requests_m}" "${total_cpu_capacity_m}" "${avg_percent_cpu}"
    printf "memory %7s / %-7s (%s%%)\n" "${total_memory_requests_pretty}" "${total_memory_capacity_pretty}" "${avg_percent_mem}"

}


optspec=":nhv-:"
while getopts "$optspec" optchar; do
    case "${optchar}" in
        -)
            case "${OPTARG}" in
                namespace)
                    val="${!OPTIND}"; OPTIND=$(( OPTIND + 1 ))
                    NAMESPACE="${val}"
                    ;;
                namespace=*)
                    val=${OPTARG#*=}
                    NAMESPACE="${val}"
                    ;;
                *)
                    if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
                        echo "Unknown option --${OPTARG}" >&2
                    fi
                    ;;
            esac;;
        n)
            shift
            if test $# -gt 0; then
                NAMESPACE=$1
            else
                echo "no namespace specified"
                exit 1
            fi
            shift
            ;;
        h)
            echo "usage: $0 [-v] [--namespace[=]<value>]" >&2
            echo "" >&2
            echo "-n[--namespace]      filter namespace" >&2
            echo "-h                   prints help" >&2
            echo "-v                   prints version" >&2
            echo "subcommands:" >&2
            echo "    namespaces       shows namespace utilization" >&2
            exit 2
            ;;
        v)
            print_plugin_version
            ;;
        *)
            if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
                echo "Non-option argument: '-${OPTARG}'" >&2
            fi
            ;;
    esac
done

if [ "${1}" == "namespaces" ]; then
    utilization_namespaces
else
    utilization_cluster 
fi
