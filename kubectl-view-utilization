#!/usr/bin/env bash
#
# Copyright 2019 Peter Strzyzewski
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Prints cluster resource utilization



PLUGIN_VERSION="v0.1.2"
VIEW_UTILIZATION_NAMESPACE=""
VIEW_UTILIZATION_NODE_LABEL=""

print_plugin_version() {
    echo "${PLUGIN_VERSION}"
    exit
}

get_pod_data() {

    local template
    local namespace

    read -r -d '' template <<'EOF'
    {{/* get_pod_data */}}
    {{ range .items }}

        {{ $namespace:=.metadata.namespace }}
        {{ $node:=.spec.nodeName }}

        {{ range .spec.containers }}

            {{ $namespace }}
            {{ "\t" }}
             
            {{ $node }}
            {{"\t"}}

            {{ if .resources.requests.cpu }}
                {{ .resources.requests.cpu }}
            {{end}}
            {{ "\t" }}

            {{ if .resources.requests.memory }}
                {{ .resources.requests.memory }}
            {{end}}

            {{ "\n" }}

        {{end}}
    {{end}}
EOF

    # Debug
    #echo "${template//[$' \t\r\n']}"

    if [ "${VIEW_UTILIZATION_NAMESPACE}" != "" ]; then
        namespace="--namespace=${VIEW_UTILIZATION_NAMESPACE}"
    else
        namespace="--all-namespaces"
    fi

    kubectl get pod $namespace --field-selector=status.phase=Running -o=go-template --template="${template//[$' \t\r\n']}"
}

get_node_data() {
    local node_label

    if [ "${VIEW_UTILIZATION_NODE_LABEL}" != "" ]; then
        node_label="-l ${VIEW_UTILIZATION_NODE_LABEL}"
    fi

    kubectl get nodes $node_label -o=jsonpath="{range .items[*]}{.metadata.name}{'\t'}{.status.allocatable.cpu}{'\t'}{.status.allocatable.memory}{'\n'}{end}"
}


cluster_utilization() {

    awk \
    "$VIEW_UTILIZATION_AWK_FN"'
    NR==FNR { node[$1]; } 

    NR==FNR && $2 ~ /[0-9]$/ { alloc_cpu+=$2*1000; };
    NR==FNR && $2 ~ /m?$/    { alloc_cpu+=$2; };
    NR==FNR && $3 ~ /Ki?$/   { alloc_mem+=$3;next };

    # CPU requests
    $2 in node && $3 ~ /[0-9]$/ { req_cpu+=$3*1000; };
    $2 in node && $3 ~ /m?$/    { req_cpu+=$3; };

    # memory requests
    $2 in node && $4 ~ /M(i)?$/ { req_mem+=$4*1024;$3; next };
    $2 in node && $4 ~ /G(i)?$/ { req_mem+=$4*1048576; next };
    $2 in node && $4 ~ /T(i)?$/ { req_mem+=$4*1073741824; next };
    END {
        if ( alloc_cpu > 0 && alloc_mem > 0 ) {
            printf("cores  %5s / %-5s (%d%%)\n", cpu_pretty(req_cpu), cpu_pretty(alloc_cpu), req_cpu * 100 / alloc_cpu);
            printf("memory %5s / %-5s (%d%%)\n", mem_pretty(req_mem), mem_pretty(alloc_mem), req_mem * 100 / alloc_mem);
        }
    }
    ' <(get_node_data) <(get_pod_data) 
}

namespace_utilization() {

    awk \
    "$VIEW_UTILIZATION_AWK_FN"'
    namespaces[$1];

    # CPU requests
    $3 ~ /[0-9]$/ { req_cpu[$1]+=$3*1000; };
    $3 ~ /m?$/    { req_cpu[$1]+=$3; };

    # memory requests
    $4 ~ /M(i)?$/ { req_mem[$1]+=$4*1024;$3; next };
    $4 ~ /G(i)?$/ { req_mem[$1]+=$4*1048576; next };
    $4 ~ /T(i)?$/ { req_mem[$1]+=$4*1073741824; next };

    END {

        for (namespace in namespaces) { 
            if (length(namespace)>longest_namespace_len) {
                longest_namespace_len = length(namespace) + 2
            }
        }

        printf("%-" longest_namespace_len "s%8s%10s\n", "NAMESPACE", "CPU", "MEMORY")

        for (namespace in namespaces) 
            printf("%-" longest_namespace_len "s%8s%10s\n", namespace, cpu_pretty(req_cpu[namespace]), mem_pretty(req_mem[namespace]))
    }
    ' <(get_pod_data) 
}

VIEW_UTILIZATION_AWK_FN='
function cpu_pretty(sum){
    if (sum < 10000) {
        ret = sprintf("%.2g",sum/1000)
    } else {
        ret = sprintf("%d",sum/1000)
    }
    return ret
}
 
function mem_pretty(sum){
    if (sum > 0) { 
        hum[1024**3]="T";
        hum[1024**2]="G";
        hum[1024**1]="M";
        for (x=1024**3; x>=1024; x/=1024){ 
            if (sum>=x) { 
                if (sum/x <= 10){
                    ret = sprintf("%.2g%s",sum/x,hum[x]);break;
                } else {
                ret = sprintf("%.f%s",sum/x,hum[x]);break;
                }
            }
        }
    } else {
    return 0
}
    return ret
}
'




optspec=":nlhv-:"
while getopts "$optspec" optchar; do
    case "${optchar}" in
        -)
            case "${OPTARG}" in
                namespace)
                    val="${!OPTIND}"; OPTIND=$(( OPTIND + 1 ))
                    VIEW_UTILIZATION_NAMESPACE="${val}"
                    ;;
                namespace=*)
                    val=${OPTARG#*=}
                    VIEW_UTILIZATION_NAMESPACE="${val}"
                    ;;
                selector)
                    val="${!OPTIND}"; OPTIND=$(( OPTIND + 1 ))
                    VIEW_UTILIZATION_NODE_LABEL="${val}"
                    ;;
                selector=*)
                    val=${OPTARG#*=}
                    VIEW_UTILIZATION_NODE_LABEL="${val}"
                    ;;
                *)
                    if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
                        echo "Unknown option --${OPTARG}" >&2
                    fi
                    ;;
            esac;;
        n)
            shift
            if test $# -gt 0; then
                VIEW_UTILIZATION_NAMESPACE=$1
            else
                echo "no namespace specified"
                exit 1
            fi
            shift
            ;;
        l)
            shift
            if test $# -gt 0; then
                VIEW_UTILIZATION_NODE_LABEL=$1
            else
                echo "no label specified"
                exit 1
            fi
            shift
            ;;
        h)
            echo "usage: $0 [-v] [--namespace[=]<value>]" >&2
            echo "" >&2
            echo "-n[--namespace]     filter by namespace" >&2
            echo "-l[--selector]      filter by node label" >&2
            echo "-h                  prints help" >&2
            echo "-v                  prints version" >&2
            echo "subcommands:" >&2
            echo "    namespaces      shows namespace utilization" >&2
            exit 2
            ;;
        v)
            print_plugin_version
            ;;
        *)
            if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
                echo "Non-option argument: '-${OPTARG}'" >&2
            fi
            ;;
    esac
done

if [ "${1}" == "namespaces" ]; then
    namespace_utilization
else
    cluster_utilization
fi
