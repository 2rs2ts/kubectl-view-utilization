#!/bin/bash

memory_prettify() {
    awk \
    '{sum=$1 ;
    hum[1024**2]="GiB";
    hum[1024**1]="Mb";
    for (x=1024**3; x>=1024; x/=1024){ 
        if (sum>=x) { 
            printf "%.2g%s\n",sum/x,hum[x];break 
        } 
    }
    }'
}

utilization_cluster() {

    local pods_all_requests
    local total_cpu_requests_m
    local total_cpu_requests_pretty
    local total_memory_requests_kb
    local total_memory_requests_pretty
    local node_all_allocatable
    local total_cpu_capacity_m
    local total_memory_capacity_kb
    local avg_percent_mem
    local avg_percent_cpu

    pods_all_requests=$(kubectl get pod --all-namespaces -o=jsonpath="{range .items[*]}{range .spec.containers[*]}  {.resources.requests.cpu}{'\t'}{.resources.requests.memory}{'\n'}{end}{'\n'}{end}")
    total_cpu_requests_m=$(echo "${pods_all_requests}" | \
        awk \
      'BEGIN{IGNORECASE = 1}
       $1 ~ /[0-9]$/{s+=$1;next};
       $1 ~ /m?$/{s+=$1/1000;next};
       END {printf "%.2g\n", s}'
       )
        
    total_memory_requests_kb=$(echo "${pods_all_requests}" | \
        awk \
      'BEGIN{IGNORECASE = 1}
       $2 ~ /M(i)?$/{s+=$2*1024; next};
       $2 ~ /G(i)?$/{s+=$2*1048576; next};
       $2 ~ /T(i)?$/{s+=$2*1073741824; next};
       END {printf "%.0f\n", s}'
       )

    node_all_allocatable=$(kubectl get nodes -o=jsonpath="{range .items[*]} {.status.allocatable.cpu}{'\t'}{.status.allocatable.memory}{'\n'}{end}")
    total_cpu_capacity_m=$(echo "${node_all_allocatable}" | \
        awk \
      'BEGIN{IGNORECASE = 1}
       $1 ~ /[0-9]$/{s+=$1;next};
       END {printf "%.2g\n", s}'
       )

    total_memory_capacity_kb=$(echo "${node_all_allocatable}" | \
        awk \
      'BEGIN{IGNORECASE = 1}
       $2 ~ /Ki?$/{s+=$2; next};
       END {printf "%.0f\n", s}'
       )
 
    avg_percent_cpu=$(echo "${total_cpu_requests_m} * 100 / ${total_cpu_capacity_m}" | bc )
    avg_percent_mem=$(echo "${total_memory_requests_kb} * 100 / ${total_memory_capacity_kb}" | bc )

    total_memory_requests_pretty=$(echo "${total_memory_requests_kb}" | memory_prettify)
    total_memory_capacity_pretty=$(echo "${total_memory_capacity_kb}" | memory_prettify)

    echo "cores ${total_cpu_requests_m}/${total_cpu_capacity_m} (${avg_percent_cpu}%)"
    echo "memory ${total_memory_requests_pretty}/${total_memory_capacity_pretty} (${avg_percent_mem}%)"
}

if [[ "$1" == "version" ]]; then
    echo "1.0.0"
    exit 0
fi

utilization_cluster 
